<!--
<script>
    import { onMount } from "svelte";
    import { pop } from "svelte-spa-router";
    import Table from "sveltestrap/src/Table.svelte";
    import Button from "sveltestrap/src/Button.svelte";
    import Input from "sveltestrap/src/Input.svelte";
    import Label from "sveltestrap/src/Label.svelte";
    import FormGroup from "sveltestrap/src/FormGroup.svelte";
    import { Pagination, PaginationItem, PaginationLink } from "sveltestrap";
    const BASE_API_URL = "/api/v1/covid19-tracking-germany";
    let covid19_tracking_germany = [];
    let newStat = {
        state: "",
        county: "",
        "agegroup": "",
        "gender": "",
        "date": "",
        "cases": "",
        "death": "",
        "recovered": ""
    };
    /* These variables are for the selects */
    let states = [];
    let countys = [];
    let currentState = "-";
    let currentCounty = "-";
    let numberElementsPages = 10;
    let offset = 0;
    let currentPage = 1; /* We could use just one variable offset or currentPage, we leave both */
    let moreData = true;
    onMount(() => {
        getStats(currentState, currentCounty);
    });
    onMount(getstatescountys);
    /* 
	This function get countys and states to put them into the selects.
	We call it just once in the onMount and each time we need to update the selects,
	but taking care we are asking for all the data.
	*/
    async function getstatescountys() {
        const res = await fetch(BASE_API_URL);
        /* Getting the states for the select */
        if (res.ok) {
            const json = await res.json();
            states = json.map((d) => {
                return d.state;
            });
            /* Deleting duplicated states */
            states = Array.from(new Set(states));
            /* Getting the countys for the select */
            countys = json.map((d) => {
                return d.county;
            });
            /* Deleting duplicated countys */
            countys = Array.from(new Set(countys));
            console.log(
                "Counted " +
                    states.length +
                    "states and " +
                    countys.length +
                    "countys."
            );
        } else {
            errorAlert(
                "Error interno al intentar obtener las ciudades y los años"
            );
            console.log("ERROR!");
        }
    }
    async function getStats(state, county) {
        console.log("Fetching covid19 tracking germany data...");
        /* Checking if the fields are empty */
        var url = BASE_API_URL + "?limit=" + numberElementsPages;
        if (state != "-" && county != "-") {
            url = url + "&state=" + state + "&county=" + county;
        } else if (state != "-" && county == "-") {
            url = url + "&state=" + state;
        } else if (state == "-" && county != "-") {
            url = url + "&county=" + county;
        }
        const res = await fetch(
            url + "&offset=" + numberElementsPages * offset
        );
        /* Asking for the following data for the pagination */
        const next = await fetch(
            url + "&offset=" + numberElementsPages * (offset + 1)
        );
        if (res.ok && next.ok) {
            console.log("Ok:");
            const json = await res.json();
            const jsonNext = await next.json();
            covid19_tracking_germany = json;
            /* Checking if we have run out of elements */
            if (jsonNext.length == 0) {
                moreData = false;
            } else {
                moreData = true;
            }
            console.log("Received " + covid19_tracking_germany.length + " covid19 tracking germany data.");
        } else {
            errorAlert("Error interno al intentar obtener todos los datos");
            console.log("ERROR!");
        }
    }
    async function loadInitialStats() {
        console.log("Loading initial covid19 tracking germany data...");
        deleteStats();
        const res = await fetch(BASE_API_URL + "/loadInitialData").then(
            function (res) {
                if (res.ok) {
                    console.log("Ok");
                    /* Putting the current county and the state to remove the search */
                    currentCounty = "-";
                    currentState = "-";
                    getStats(currentState, currentCounty);
                    getstatescountys();
                    initialDataAlert();
                } else {
                    errorAlert(
                        "Error interno al intentar obtener los datos iniciales"
                    );
                    console.log("ERROR!");
                }
            }
        );
    }
    async function insertStat() {
        console.log("Inserting covid19 tracking germany data...");
        /* Checking if the state and the county are not empty */
        if (
            newCovid19TrackingGermany.state == "" ||
            newCovid19TrackingGermany.state == null ||
            newCovid19TrackingGermany.county == "" ||
            newCovid19TrackingGermany.county == null
        ) {
            alert(
                "Se debe incluir el nombre del estado y del condado"
            );
        } else {
            const res = await fetch(BASE_API_URL, {
                method: "POST",
                body: JSON.stringify(newCovid19TrackingGermany),
                headers: {
                    "Content-Type": "application/json",
                },
            }).then(function (res) {
                if (res.ok) {
                    /* If we want the select to be updated each time we insert, uncomment the line below */
                    getstatescountys();
                    getStats(currentState, currentCounty);
                    insertAlert();
                } else if (res.status == 409) {
                    alert("¡Ya existe ese dato en nuestra base de datos!");
                } else {
                    errorAlert(
                        "Error interno al intentar insertar un elemento"
                    );
                }
            });
        }
    }
    async function deleteStat(state, county) {
        console.log("Deleting divorce stat...");
        const res = await fetch(BASE_API_URL + "/" + state + "/" + county, {
            method: "DELETE",
        }).then(function (res) {
            if (res.ok) {
                getStats(currentState, currentCounty);
                /* If we want to delete the entry in the select, uncomment the line below */
                /* We decided to conserve the option because we find it more logic */
                getstatescountys();
                deleteAlert();
            } else if (res.status == 404) {
                errorAlert("Se ha intentado borrar un elemento inexistente.");
            } else {
                errorAlert(
                    "Error interno al intentar borrar un elemento concreto"
                );
            }
        });
    }
    async function deleteStats() {
        console.log("Deleting covid19 tracking germany data...");
        const res = await fetch(BASE_API_URL + "/", {
            method: "DELETE",
        }).then(function (res) {
            if (res.ok) {
                /* To put the correct number in pagination */
                setOffset(0);
                currentCounty = "-";
                currentState = "-";
                getStats(currentState, currentCounty);
                getstatescountys();
                deleteAllAlert();
            } else {
                errorAlert(
                    "Error interno al intentar borrar todos los elementos"
                );
            }
        });
    }
    function search(state, county) {
        setOffset(0);
        getStats(state, county);
    }
    function setOffset(newOffset) {
        offset = newOffset;
        currentPage = newOffset + 1;
    }
    function addOffset(increment) {
        offset += increment;
        currentPage += increment;
        getStats(currentState, currentCounty);
    }
    /* These functions are for the alerts */
    function insertAlert() {
        clearAlert();
        var alert_element = document.getElementById("div_alert");
        alert_element.style = "position: fixed; top: 0px; top: 1%; width: 90%;";
        alert_element.className = "alert alert-dismissible in alert-success ";
        alert_element.innerHTML =
            "<strong>¡Dato insertado!</strong> El dato ha sido insertado correctamente";
        setTimeout(() => {
            clearAlert();
        }, 3000);
    }
    function deleteAlert() {
        clearAlert();
        var alert_element = document.getElementById("div_alert");
        alert_element.style = "position: fixed; top: 0px; top: 1%; width: 90%;";
        alert_element.className = "alert alert-dismissible in alert-danger ";
        alert_element.innerHTML =
            "<strong>¡Dato borrado!</strong> El dato ha sido borrado correctamente";
        setTimeout(() => {
            clearAlert();
        }, 3000);
    }
    function deleteAllAlert() {
        clearAlert();
        var alert_element = document.getElementById("div_alert");
        alert_element.style = "position: fixed; top: 0px; top: 1%; width: 90%;";
        alert_element.className = "alert alert-dismissible in alert-danger ";
        alert_element.innerHTML =
            "<strong>¡Datos borrados!</strong> Todos los datos han sido borrados correctamente";
        setTimeout(() => {
            clearAlert();
        }, 3000);
    }
    function initialDataAlert() {
        clearAlert();
        var alert_element = document.getElementById("div_alert");
        alert_element.style = "position: fixed; top: 0px; top: 1%; width: 90%;";
        alert_element.className = "alert alert-dismissible in alert-warning ";
        alert_element.innerHTML =
            "<strong>¡Datos iniciales!</strong> Se han generado datos iniciales correctamente ";
        setTimeout(() => {
            clearAlert();
        }, 3000);
    }
    function errorAlert(error) {
        clearAlert();
        var alert_element = document.getElementById("div_alert");
        alert_element.style = "position: fixed; top: 0px; top: 1%; width: 90%;";
        alert_element.className = "alert alert-dismissible in alert-danger ";
        alert_element.innerHTML =
            "<strong>¡ERROR!</strong> ¡Ha ocurrido un error! " + error;
        setTimeout(() => {
            clearAlert();
        }, 3000);
    }
    function clearAlert() {
        var alert_element = document.getElementById("div_alert");
        alert_element.style = "display: none; ";
        alert_element.className = "alert alert-dismissible in";
        alert_element.innerHTML = "";
    }
</script>

<main>
    
   This div is for the alerts 
    <div role="alert" id="div_alert" style="display: none;" />
    {#await covid19_tracking_germany}
        Loading covid19 tracking germany data...
    {:then covid19_tracking_germany}
        <FormGroup>
            <Label for="selectstate">Búsqueda por estado</Label>
            <Input
                type="select"
                name="selectstate"
                id="selectstate"
                bind:value={currentState}
            >
                {#each states as state}
                    The if to conserve the option selected after search and delete
                    {#if state == currentState}
                        <option selected="selected">{state}</option>
                    {:else}
                        <option>{state}</option>
                    {/if}
                {/each}
                <option>-</option>
            </Input>
        </FormGroup>

        <FormGroup>
            <Label for="selectcounty">Condado</Label>
            <Input
                type="select"
                name="selectcounty"
                id="selectcounty"
                bind:value={currentCounty}
            >
                {#each countys as county}
                   The if to conserve the option selected after search and delete
                    {#if county == currentCounty}
                        <option selected="selected">{county}</option>
                    {:else}
                        <option>{county}</option>
                    {/if}
                {/each}
                <option>-</option>
            </Input>
        </FormGroup>

        <Button
            outline
            color="secondary"
            on:click={search(currentState, currentCounty)}
            class="button-search"
        >
            <i class="fas fa-search" /> Buscar
        </Button>

        <Table bordered>
                <thead>
                    <tr>
                    <th>Estado</th>
                    <th>Condado</th>
                    <th>Grupo de edad</th>
                    <th>Sexo</th>
                    <th>Fecha</th>
                    <th>Casos</th>
                    <th>Muertes</th>
                    <th>Recuperados</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td
                ><input
                    type="text"
                    placeholder="Bayern"
                    bind:value={newStat.state}
                /></td
                >
                <td
                ><input
                    type="text"
                    placeholder="SK-Hof"
                    bind:value={newStat.county}
                /></td
                >
                <td
                ><input
                    type="text"
                    placeholder="05-14"
                    bind:value={newStat["agegroup"]}
                /></td
                >
                <td
                ><input
                    type="text"
                    placeholder="F o M"
                    bind:value={newStat["gender"]}
                /></td
                >
                <td
                ><input
                    type="text"
                    placeholder="03/04/2021"
                    bind:value={newStat["date"]}
                /></td
                >
                <td
                ><input
                    type="number"
                    placeholder="1"
                    min="0"
                    bind:value={newStat["cases"]}
                /></td
                >
                <td
                ><input
                    type="number"
                    placeholder="1"
                    min="0"
                    bind:value={newStat["death"]}
                /></td
                >
                <td
                ><input
                    type="number"
                    placeholder="1"
                    min="0"
                    bind:value={newStat["recovered"]}
                /></td
                >
                    <td>
                        <Button outline color="primary" on:click={insertStat}>
                            <i class="far fa-edit" /> Insertar
                        </Button>
                    </td>
                </tr>
                {#each covid19_tracking_germany as stat}
                    <tr>
                        <td>
                            <a
                                href="#/covid19-tracking-germany/{stat.state}/{stat.county}"
                            >
                                {stat.state}
                            </a>
                        </td>
                        <td> {stat.county} </td>
                        <td> {stat["agegroup"]} </td>
                        <td>
                            {stat["gender"]}
                        </td>
                        <td>
                            {stat["date"]}

                        </td>
                        <td>
                            {stat["cases"]}
                            
                        </td>
                        <td>
                            {stat["deaths"]}
                            
                        </td>
                        <td>
                            {stat["recovered"]}
                            
                        </td>
                        <td>
                            <Button
                                outline
                                color="danger"
                                on:click={deleteStat(
                                    stat.state,
                                    stat.county
                                )}
                            >
                                <i class="fa fa-trash" aria-hidden="true" /> Borrar
                            </Button>
                        </td>
                    </tr>
                {/each}
            </tbody>
        </Table>
    {/await}

    <Pagination style="float:right;" ariaLabel="Cambiar de página">
        <PaginationItem class={currentPage === 1 ? "disabled" : ""}>
            <PaginationLink
                previous
                href="#/covid19TrackingGermanyAPI"
                on:click={() => addOffset(-1)}
            />
        </PaginationItem>

         If we are not in the first page
        {#if currentPage != 1}
            <PaginationItem>
                <PaginationLink href="#/covid19TrackingGermanyAPI" on:click={() => addOffset(-1)}
                    >{currentPage - 1}</PaginationLink
                >
            </PaginationItem>
        {/if}
        <PaginationItem active>
            <PaginationLink href="#/covid19TrackingGermanyAPI">{currentPage}</PaginationLink>
        </PaginationItem>

       If there are more elements
        {#if moreData}
            <PaginationItem>
                <PaginationLink href="#/covid19TrackingGermanyAPI" on:click={() => addOffset(1)}
                    >{currentPage + 1}</PaginationLink
                >
            </PaginationItem>
        {/if}

        <PaginationItem class={moreData ? "" : "disabled"}>
            <PaginationLink
                next
                href="#/covid19TrackingGermanyAPI"
                on:click={() => addOffset(1)}
            />
        </PaginationItem>
    </Pagination>

    <Button outline color="secondary" on:click={pop}>
        <i class="fas fa-arrow-circle-left" /> Atrás
    </Button>
    <Button outline color="warning" on:click={loadInitialStats}>
        <i class="fas fa-cloud-upload-alt" aria-hidden="true" /> Cargar datos iniciales
    </Button>
    <Button outline color="danger" on:click={deleteStats}>
        <i class="fa fa-trash" aria-hidden="true" /> Borrar todo
    </Button>
</main>

-->